name: Build and Release Mineconomy

# 트리거 설정: 태그가 'v'로 시작하는 경우 빌드 및 릴리즈 자동 실행
on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest  # Linux 환경에서 실행

    steps:
      # 1. 저장소 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3  # GitHub에서 저장소를 체크아웃하여 빌드할 파일들을 로드합니다.

      # 2. JDK 설정
      - name: Set up JDK 22
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # JDK 22 버전을 사용하며, Eclipse Temurin 배포판을 지정합니다.
          java-version: '22'
          cache: gradle  # Gradle 캐싱을 활성화하여 빌드 속도 최적화

      # 3. Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew build --no-daemon
        # `--no-daemon` 플래그를 사용하여 Gradle 데몬을 비활성화합니다.
        # 데몬이 백그라운드에 계속 실행되는 것을 방지하여 CI/CD 환경에서의 충돌을 줄입니다.

      # 4. 릴리즈 파일 패키징
      - name: Package Release Files
        run: |
          mkdir release  # 릴리즈용 디렉터리 생성
          cp -r build/libs/* release/  # 코어 모듈의 빌드된 JAR 파일 복사
          cp -r path/to/Dynamic_Graph/build/libs/* release/  # 그래프 모듈의 JAR 파일 복사
          cp -r path/to/Resource_Pack/*.zip release/  # 리소스 팩(.zip 파일) 복사
        # 각 모듈에서 생성된 파일을 `release` 디렉터리에 복사하여 릴리즈 파일로 준비합니다.

      # 5. GitHub Release 업로드
      - name: Upload to GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}  # 현재 푸시된 태그 이름을 사용하여 릴리즈 생성
          name: Release ${{ github.ref_name }}  # 릴리즈 이름 지정
          body: |
            자동 생성된 릴리즈입니다. 최신 업데이트 내용이 포함되어 있습니다.
          draft: false
          prerelease: false
          artifacts: |
            release/*.jar  # JAR 파일 추가
            release/*.zip  # 리소스 팩 추가
        # 준비된 `release` 디렉터리 내 파일을 GitHub Release에 업로드합니다.
